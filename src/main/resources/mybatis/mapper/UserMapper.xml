<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wqh.blog.mapper.UserMapper">

    <cache type="com.wqh.blog.config.cache.RedisCache">
        <property name="eviction" value="LRU" />
        <property name="flushInterval" value="6000000" />
        <property name="size" value="1024" />
        <property name="readOnly" value="false" />
    </cache>

    <resultMap id="UserResultMap" type="com.wqh.blog.domain.User" >
        <id column="id" property="id" jdbcType="VARCHAR" javaType="java.lang.String" />
        <result column="address" property="address" jdbcType="VARCHAR" javaType="java.lang.String" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" javaType="java.util.Date" />
        <result column="description" property="description" jdbcType="VARCHAR" javaType="java.lang.String" />
        <result column="email" property="email" jdbcType="VARCHAR" javaType="java.lang.String" />
        <result column="icon" property="icon" jdbcType="VARCHAR" javaType="java.lang.String" />
        <result column="password" property="password" jdbcType="VARCHAR" javaType="java.lang.String" />
        <result column="phone" property="phone" jdbcType="VARCHAR" javaType="java.lang.String" />
        <result column="role" property="role" jdbcType="VARCHAR" javaType="com.wqh.blog.enums.RoleEnum" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" javaType="java.util.Date" />
        <result column="username" property="username" jdbcType="VARCHAR" javaType="java.lang.String" />
    </resultMap>

    <sql id="userColumns">
        a.id AS "id",
        a.username AS "username",
        a.phone AS "phone",
        a.address AS "address",
        a.create_time AS "createTime",
        a.description AS  "description",
        a.email AS "email",
        a.icon AS "icon",
        a.password AS "password",
        a.update_time AS "updateTime",
        a.role AS "role"
    </sql>

    <!--根据id查询-->
    <select id="get" resultMap="UserResultMap">
        SELECT
        <include refid="userColumns"/>
        FROM t_blog_user a
        WHERE a.id = #{id}
    </select>


    <!--根据传入的条件查询-->
    <select id="getByEntity" resultMap="UserResultMap">
        SELECT
        <include refid="userColumns"/>
        FROM t_blog_user a
        <where>
            <if test="id != null and id != ''">
               a.id = #{id}
            </if>
            <if test="phone != null and phone != ''">
                AND a.phone = #{phone}
            </if>
            <if test="email != null and email != ''">
                AND a.email = #{email}
            </if>
            <if test="username != null and username != ''">
                AND a.username = #{username}
            </if>
        </where>
    </select>


    <!--查询用户列表-->
    <select id="findList" resultMap="UserResultMap">
        SELECT
        <include refid="userColumns"/>
        FROM t_blog_user a
        <where>
        </where>
    </select>

    <!--添加用户-->
    <insert id="insert" flushCache="true">
        <selectKey keyProperty="id" resultType="java.lang.String"
                   order="BEFORE">
            select replace(uuid(),'-','') from dual
        </selectKey>
         INSERT INTO
         t_blog_user (
              id,
              address,
              create_time,
              description,
              email,
              icon,
              password,
              phone,
              role,
              update_time,
               username
            )
          VALUES (
            #{id},
            #{address},
            #{createTime},
            #{description},
            #{email},
            #{icon},
            #{password},
            #{phone},
            #{role},
            #{updateTime},
            #{username}
          )
    </insert>


    <!--物理删除-->
    <delete id="delete" flushCache="true">
        DELETE FROM t_blog_user
        WHERE id = #{id}
    </delete>

    <!--逻辑删除-->
    <update id="deleteByLogic" flushCache="true">
        UPDATE t_blog_user SET
            del_flag = #{DEL_FLAG_DELETE}
        WHERE id = #{id}
    </update>

</mapper>