<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wqh.blog.mapper.ArticleMapper">

    <!--表示开启基于redis的二级缓存-->
    <cache type="com.wqh.blog.config.cache.RedisCache">
        <property name="eviction" value="LRU" />
        <property name="flushInterval" value="6000000" />
        <property name="size" value="1024" />
        <property name="readOnly" value="false" />
    </cache>

    <resultMap id="BaseResultMap" type="com.wqh.blog.domain.Article">
        <id column="id" property="id" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result column="comment_count" jdbcType="INTEGER" javaType="java.lang.Integer"/>
        <result column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
        <result column="del_flag" jdbcType="INTEGER" javaType="java.lang.Integer"/>
        <result column="look_count" jdbcType="INTEGER" javaType="java.lang.Integer"/>
        <result column="tag" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result column="title" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
        <result column="like_count" jdbcType="INTEGER" javaType="java.lang.Integer"/>
        <result column="user_id" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result column="category_id" jdbcType="VARCHAR" javaType="java.lang.String"/>
    </resultMap>

    <sql id="userColumns">
        a.id AS "id",
        a.title AS "title",
        a.content AS "content",
        a.comment_count AS "commentCount",
        a.create_time AS "createTime",
        a.del_flag AS "delFlag",
        a.look_count AS "lookCount",
        a.tag AS "tag",
        a.update_time AS "updateTime",
        a.like_count AS "likeCount",
        u.id AS "author.id",
        u.username AS "author.username",
        u.icon AS "author.icon",
        u.description AS "author.description",
        c.id AS "category.id",
        c.name AS "category.name"
     </sql>
    <sql id="articleJoins">
        LEFT JOIN t_blog_user u ON a.user_id = u.id
        LEFT JOIN  t_blog_category c ON a.category_id = c.id
    </sql>

    <!--根据id查询-->
    <select id="get" resultType="Article">
        SELECT
             <include refid="userColumns"/>
        FROM t_blog_article a
        <include refid="articleJoins"/>
        WHERE a.id = #{id}
    </select>

    <!--查询列表，需要添加分页-->
    <select id="findList" resultType="Article">
        SELECT
        <include refid="userColumns"/>
        FROM t_blog_article a
        <include refid="articleJoins"/>
        <where>
            <if test="author != null">
                a.user_id = #{author.id}
            </if>
        </where>
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY a.create_time DESC
            </otherwise>
        </choose>
    </select>

    <!--发表文章-->
    <insert id="insert" parameterType="Article" flushCache="true">
    insert into t_blog_article (id, comment_count, create_time,
      del_flag, look_count, tag,
      title, update_time, like_count,
      user_id, category_id, content
      )
    values (#{id}, #{commentCount}, #{createTime},
          #{delFlag}, #{lookCount}, #{tag},
          #{title}, #{updateTime}, #{likeCount},
          #{author.id}, #{category.id}, #{content}
      )
  </insert>
    <!--更新文章-->
    <update id="update" parameterType="Article" flushCache="true">
      UPDATE t_blog_article
        <set>
            <if test="commentCount != null" >
                comment_count = #{commentCount},
            </if>
            <if test="createTime != null" >
                create_time = #{createTime},
            </if>
            <if test="delFlag != null" >
                del_flag = #{delFlag},
            </if>
            <if test="lookCount != null" >
                look_count = #{lookCount},
            </if>
            <if test="tag != null" >
                tag = #{tag},
            </if>
            <if test="title != null" >
                title = #{title},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime},
            </if>
            <if test="likeCount != null" >
                like_count = #{likeCount},
            </if>
            <if test="category != null" >
                category_id = #{category.id},
            </if>
            <if test="content != null" >
                content = #{content},
            </if>
        </set>
        WHERE id = #{id}
    </update>
    <!--逻辑删除-->
    <update id="deleteByLogic" flushCache="true">
        UPDATE t_blog_article SET
			del_flag = #{delFlag}
		WHERE id = #{id}
    </update>
</mapper>